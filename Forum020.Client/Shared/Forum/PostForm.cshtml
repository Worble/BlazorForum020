@inherits ForumAppComponent
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@using Microsoft.AspNetCore.Blazor.Browser.Interop

<div class="columns">
    <div class="column col-8 col-lg-12 col-mx-auto">
        <div class="columns ">
            <div class="column col-12 divider text-center" data-content=@Title></div>
            <div class="column form-group">
                <textarea id="form-text" class="form-input" bind-value-onchange="Text"></textarea>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Error))
        {
        <div class="columns mt-2">
            <div class="column">
                <div class="toast toast-error text-center">
                    <button type="button" onclick=@ToastClear class="btn btn-clear float-right"></button>
                    @Error
                </div>
            </div>
        </div>
        }
        <div class="columns mt-2">
            <div class="column">
                <label for="file-upload" class="c-hand btn float-left">Upload image: </label>
                <input id="file-upload" type="file" accept="image/*" onchange=@ReadFile class="inputfile" />
            </div>
            <div class="column text-center">
                @if (!string.IsNullOrEmpty(File))
                {
                    <img id="image" alt="Embedded Image" src=@File style="max-height:200px;max-width:200px;" />
                }
            </div>
            <div class="column">
                <button id="submit" class="btn btn-primary float-right" disabled=@ButtonDisabled onclick=@OnClickSubmit>Submit</button>
            </div>
        </div>
    </div>
</div>



@functions {
    [Parameter]
    View ViewType { get; set; }

    bool ButtonDisabled { get; set; } = false;

    string Title => (ViewType == View.Thread ? "New Thread" : "New Post");

    string Text { get { return State.Content; } set { Dispatch(new UpdateTextAction() { Text = value }); } }

    string File { get; set; } = "";

    string Error { get; set; } = "";

    public void ToastClear() => Error = string.Empty;

    protected override void OnInit()
    {
        Dispatch(new ClearTextAction());
    }

    public async Task OnClickSubmit()
    {
        ButtonDisabled = true;
        switch (ViewType)
        {
            case View.Thread:
                if (string.IsNullOrEmpty(File)){
                    ButtonDisabled = false;
                    Error = "Please submit an image.";
                }
                else
                {
                    try
                    {
                        await ActionCreators.PostThread(
                            Store.Dispatch,
                            Http,
                            State.CurrentBoard.NameShort,
                            new CreatePostDTO() { Content = State.Content, Image = File }
                            );
                        Dispatch(new ClearTextAction());
                        UriHelper.NavigateTo("/" + State.CurrentBoard.NameShort + "/" + State.CurrentBoard.CurrentThread.Id);
                    }
                    catch (Exception e)
                    {
                        Dispatch(new ClearTextAction());
                        ButtonDisabled = false;
                        File = string.Empty;
                        Dispatch(new SetErrorMessage() { Message = "Whoops! Something went wrong. Reformat your post or try again later." });
                        Console.WriteLine(e);
                    }
                }
                break;

            case View.Post:
                if(string.IsNullOrEmpty(File) && string.IsNullOrEmpty(State.Content))
                {
                    ButtonDisabled = false;
                    Error = "Please submit an image or text.";
                }
                else
                {
                    try
                    {
                        await ActionCreators.PostPost(
                            Store.Dispatch,
                            Http,
                            State.CurrentBoard.NameShort,
                            State.CurrentBoard.CurrentThread.Id,
                            new CreatePostDTO() { Content = State.Content, Image = File }
                            );
                    }
                    catch (Exception e)
                    {
                        Dispatch(new SetErrorMessage() { Message = "Whoops! Something went wrong. Reformat your post or try again later." });
                        Console.WriteLine(e);
                    }
                    Dispatch(new ClearTextAction());
                    ButtonDisabled = false;
                    File = string.Empty;
                    StateHasChanged();
                }
                break;
        }
    }

    public async Task ReadFile()
    {
        Error = string.Empty;
        ButtonDisabled = true;
        var result = await RegisteredFunction.InvokeAsync<string>("readFile", true);
        ButtonDisabled = false;
        if (result.Contains("Error: "))
        {
            Error = result;
        }
        else
        {
            File = result;
        }
        this.StateHasChanged();
    }
}