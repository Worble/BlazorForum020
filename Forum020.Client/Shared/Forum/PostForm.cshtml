@inherits ForumAppComponent
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@using Microsoft.AspNetCore.Blazor.Browser.Interop

<div class="columns">
    <div class="column col-8 col-lg-12 col-mx-auto">
        <div class="columns ">
            <div class="column col-12 divider text-center" data-content=@Title></div>
            <div class="column form-group">
                <textarea id="form-text" class="form-input" bind-value-onchange="State.Content"></textarea>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Error))
        {
        <div class="columns mt-2">
            <div class="column">
                <div class="toast toast-error">
                    <button onclick=@ToastClear class="btn btn-clear float-right"></button>
                    @Error
                </div>
            </div>
        </div>
        }
        <div class="columns mt-2">
            <div class="column">
                <label for="file-upload" class="c-hand btn float-left">Upload image: </label>
                <input id="file-upload" type="file" accept="image/*" onchange=@ReadFile class="inputfile" />
                @*<input id="image-input" type="hidden" />*@
            </div>
            <div class="column text-center">
                @if (!string.IsNullOrEmpty(File))
                {
                    <img id="image" alt="Embedded Image" src=@File style="max-height:200px;max-width:200px;" />
                }
            </div>
            <div class="column">
                <button id="submit" class="btn btn-primary float-right" disabled=@ButtonDisabled onclick=@OnClickSubmit>Submit</button>
            </div>
        </div>
    </div>
</div>



@functions {
    [Parameter]
    View ViewType { get; set; }

    bool ButtonDisabled { get; set; } = false;

    string Title => (ViewType == View.Thread ? "New Thread" : "New Post");

    string Text { get; set; }

    string File { get; set; }

    string Error { get; set; } = "";

    public void ToastClear() => Error = string.Empty;

    public async void OnClickSubmit()
    {
        ButtonDisabled = true;
        //string image = RegisteredFunction.Invoke<string>("readImageText", true);
        switch (ViewType)
        {
            case View.Thread:
                await ActionCreators.PostThread(
                    Store.Dispatch,
                    Http,
                    State.CurrentBoard.NameShort,
                    new PostDTO() { Content = State.Content, Image = File }
                    );
                Dispatch(new ClearTextAction());
                UriHelper.NavigateTo("/" + State.CurrentBoard.NameShort + "/" + State.CurrentBoard.CurrentThread.Id);
                break;

            case View.Post:
                await ActionCreators.PostPost(
                    Store.Dispatch,
                    Http,
                    State.CurrentBoard.NameShort,
                    State.CurrentBoard.CurrentThread.Id,
                    new PostDTO() { Content = State.Content, Image = File }
                    );
                Dispatch(new ClearTextAction());
                ButtonDisabled = false;
                StateHasChanged();
                break;
        }
    }

    public async Task ReadFile()
    {
        Error = string.Empty;
        ButtonDisabled = true;
        var result = await RegisteredFunction.InvokeAsync<string>("readFile", true);
        ButtonDisabled = false;
        if (result.Contains("Error: "))
        {
            Error = result;
        }
        else
        {
            File = result;
        }
    }
}