@inherits ForumAppComponent
@inject HttpClient Http
@using System.Text.RegularExpressions;

<div class="card" style="height:100%">
    <div class="card-header">
        <div class="card-title">
            @Post.DateCreated.ToUniversalTime()
            <a href=@PostLink>No.</a>
            <a class="c-hand" onclick=@AddQuote>#@Post.Id</a>            
            <PostSideMenu PostId="Post.Id"></PostSideMenu>
        </div>
        @if (!string.IsNullOrEmpty(Post.ImageUrl))
        {
            <div class="card-subtitle text-grey">
                <a href="@Post.ImageUrl" target="_blank">@Post.ImageUrl.Split('/').Last()</a>
            </div>
        }
    </div>
    <div class="card-body" style="height:100%;min-height:100px;position:relative">
        @if (!string.IsNullOrEmpty(Post.ImageUrl))
        {
        <a href="@Post.ImageUrl" target="_blank">
            <img src="@Post.ThumbnailUrl" class="img-responsive float-left mr-2" />
        </a>
        }
        @if (!string.IsNullOrEmpty(Post.Content))
        {
            @PostContent
        }
    </div>
    @if (ViewType == View.Thread)
    {
        <div class="card-footer">
            <a href=@RoutePaths.PostsRoute(State.CurrentBoard.NameShort, Post.Id)>View Thread</a>
        </div>
    }
</div>

@functions {
    [Parameter]
    PostDTO Post { get; set; }

    [Parameter]
    View ViewType { get; set; }

    string PostLink => (Post.IsOp ? RoutePaths.PostsRoute(State.CurrentBoard.NameShort, Post.Id) : RoutePaths.PostsRoute(State.CurrentBoard.NameShort, Post.ThreadId.Value) + '#' + Post.Id);

    void AddQuote() => Dispatch(new AddQuoteAction() { PostId = Post.Id.ToString() });

    private Microsoft.AspNetCore.Blazor.RenderFragment PostContent;

    protected override void OnInit()
    {
        int sequence = 1;
        PostContent = builder =>
        {
            builder.OpenElement(sequence, "p");
            sequence++;
            builder.AddAttribute(sequence, "style", "white-space:pre-line;");
            sequence++;
            var lines = Post.Content.Split(
                new[] { "\r\n", "\r", "\n" },
                StringSplitOptions.None
            );
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                sequence++;
                bool closeSpan = false;
                //if line is a single > and greater than 1 chracter, make it  quote line
                if (line.Count() > 1 && line[0] == '>' && line[1] != '>')
                {
                    builder.OpenElement(sequence, "span");
                    closeSpan = true;
                    builder.AddAttribute(sequence, "class", "quote");
                    sequence++;
                }
                RenderLine(builder, ref sequence, line);

                if (closeSpan) builder.CloseElement(); // closing quote span

                if (i + 1 != lines.Length) //append newline except for the very last line
                {
                    builder.AddContent(sequence, "\n");
                    sequence++;
                }
            }
            builder.CloseElement(); // closing p
        };
    }

    private void RenderLine(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder, ref int sequence, string line)
    {
        var words = line.Split(new[] {' '}, StringSplitOptions.None);
        foreach (var word in words)
        {
            var regex = Regex.Match(word, @"^>>>\/(?<board>[A-Za-z]+)\/(?<id>[0-9]+)\/?$");
            if (regex.Success) //board redirect
            {
                var board = regex.Groups["board"].Value;
                var id = regex.Groups["id"].Value;
                builder.OpenElement(sequence, "span");
                sequence++;
                builder.AddAttribute(sequence, "class", "text-link");
                sequence++;
                builder.OpenComponent<PostLink>(sequence);
                sequence++;
                builder.AddAttribute(sequence, "Content", word);
                sequence++;
                builder.AddAttribute(sequence, "PostId", id);
                sequence++;
                builder.AddAttribute(sequence, "BoardName", board);
                sequence++;
                builder.CloseComponent(); //closing PostLink
                builder.CloseElement(); //closing span
                builder.AddContent(sequence, " ");
                sequence++;
            }
            else if (Regex.IsMatch(word, @"^>>[0-9]+$")) //quote
            {
                var id = word.Substring(2);
                builder.OpenElement(sequence, "span");
                sequence++;
                builder.AddAttribute(sequence, "class", "text-link");
                sequence++;
                builder.OpenComponent<PostLink>(sequence);
                sequence++;
                builder.AddAttribute(sequence, "Content", word);
                sequence++;
                builder.AddAttribute(sequence, "PostId", id);
                sequence++;
                builder.AddAttribute(sequence, "BoardName", State.CurrentBoard.NameShort);
                sequence++;
                builder.CloseComponent(); //closing PostLink
                builder.CloseElement(); //closing span
                builder.AddContent(sequence, " ");
                sequence++;
            }
            else
            {
                builder.AddContent(sequence, word);
                sequence++;
                builder.AddContent(sequence, " ");
                sequence++;
            }
        }
    }
}