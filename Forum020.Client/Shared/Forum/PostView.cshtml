@inherits ForumAppComponent
@inject HttpClient Http
@using System.Text.RegularExpressions;


<div class="column mt-2 @FormatView" id=@Post.Id>
    <div class="card" style="height:100%">
        <div class="card-header">
            <div class="card-title">
                @Post.DateCreated.ToUniversalTime()
                <a href=@PostLink>No.</a>
                <a class="c-hand" onclick=@AddQuote>#@Post.Id</a>
            </div>
            @if (Post.ImageUrl != null)
            {
                <div class="card-subtitle text-grey">
                    <a href="@Post.ImageUrl" target="_blank">@Post.ImageUrl.Split('/').Last()</a>
                </div>
            }
        </div>
        <div class="card-body" style="height:100%;">
            <a href="@Post.ImageUrl" target="_blank">
                <img src="@Post.ThumbnailUrl" class="img-responsive float-left" />
            </a>
            @*<p style="white-space:pre-line;">@Post.Content</p>*@
            @if (!string.IsNullOrEmpty(Post.Content))
            {
                @PostContent
            }
        </div>
        @if (ViewType == View.Thread)
        {
            <div class="card-footer">
                <a href=@RoutePaths.Posts(State.CurrentBoard.NameShort, Post.Id)>View Thread</a>
            </div>
        }
    </div>
</div>

@functions {
    [Parameter]
    PostDTO Post { get; set; }

    [Parameter]
    View ViewType { get; set; }

    string FormatView => (ViewType == View.Thread && State.ThreadViewType == ThreadView.Catalogue ? "col-4 col-lg-6 col-sm-12" : "col-12");

    string PostLink => (Post.IsOp ? RoutePaths.Posts(State.CurrentBoard.NameShort, Post.Id) : RoutePaths.Posts(State.CurrentBoard.NameShort, Post.ThreadId.Value) + '#' + Post.Id);

    void AddQuote() => Dispatch(new AddQuoteAction() { PostId = Post.Id.ToString() });

    private Microsoft.AspNetCore.Blazor.RenderFragment PostContent;

    protected  override void OnInit()
    {
        int sequence = 1;
        PostContent = builder =>
        {
            builder.OpenElement(sequence, "p");
            sequence++;
            builder.AddAttribute(sequence, "style", "white-space:pre-line;");
            sequence++;
            var lines = Regex.Split(Post.Content, "\n");
            string line;
            for (int i = 0; i < lines.Length; i++)
            {
                line = lines[i];
                sequence++;
                bool closeSpan = false;
                if (line.Count() > 1 && line[0] == '>' && line[1] != '>')
                {
                    builder.OpenElement(sequence, "span");
                    closeSpan = true;
                    builder.AddAttribute(sequence, "class", "quote");
                    sequence++;
                }
                RenderLine(builder, ref sequence, line);

                if (closeSpan) {
                    builder.CloseElement(); // closing span
                }
                if (!(i + 1 == lines.Length))
                {
                    builder.AddContent(sequence, "\n");
                }
                sequence++;
            }
            builder.CloseElement(); // closing p
        };
    }

    private void RenderLine(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder, ref int sequence, string line)
    {
        var words = line.Split(null);
        foreach (var word in words)
        {
            if (Regex.IsMatch(word, @"^>>>\/[A-Za-z]+\/[0-9]+\/?$")) //board redirect
            {
                builder.OpenElement(sequence, "a");
                sequence++;
                builder.AddAttribute(sequence, "href", "#");
                builder.OpenElement(sequence, "span");
                sequence++;
                builder.AddAttribute(sequence, "class", "text-link");
                sequence++;
                builder.AddContent(sequence, word);
                sequence++;
                builder.AddContent(sequence, " ");
                sequence++;
                builder.CloseElement(); //closing span
                builder.CloseElement(); //closing a
            }
            else if (Regex.IsMatch(word, @"^>>[0-9]+$")) //quote
            {
                var id = word.Substring(2);
                builder.OpenElement(sequence, "span");
                sequence++;
                builder.AddAttribute(sequence, "class", "text-link");
                sequence++;
                builder.OpenComponent<PostLink>(sequence);
                sequence++;
                builder.AddAttribute(sequence, "Content", word);
                sequence++;
                builder.AddAttribute(sequence, "PostId", id);
                sequence++;
                builder.AddAttribute(sequence, "BoardName", State.CurrentBoard.NameShort);
                sequence++;
                builder.CloseComponent(); //closing PostLink
                builder.CloseElement(); //closing span
                builder.AddContent(sequence, " ");
                sequence++;
            }
            else
            {
                builder.AddContent(sequence, word);
                sequence++;
                builder.AddContent(sequence, " ");
                sequence++;
            }
        }
    }

    private string GetLinkUrl(string boardName, int postId)
    {
        return "fuckit";
        //return Task.Run<string>(() => Http.GetJsonAsync<string>(RoutePaths.Api + boardName + "/get-link/" + postId)).Result;
    }
}