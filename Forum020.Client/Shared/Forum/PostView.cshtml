@inherits ForumAppComponent
@inject HttpClient Http
@using System.Text.RegularExpressions;

<div class="card" style="height:100%">
    <div class="card-header">
        <div class="card-title">
            @Post.DateCreated.ToUniversalTime()
            <a href=@PostLink>No.</a>
            <a class="c-hand" onclick=@AddQuote>#@Post.Id</a>            
            <PostSideMenu PostId="Post.Id"></PostSideMenu>
        </div>
        @if (!string.IsNullOrEmpty(Post.ImageUrl))
        {
            <div class="card-subtitle text-grey">
                <a href="@Post.ImageUrl" target="_blank">@Post.ImageUrl.Split('/').Last()</a>
            </div>
        }
    </div>
    <div class="card-body" style="height:100%;min-height:100px;position:relative;">
        @if (!string.IsNullOrEmpty(Post.ImageUrl))
        {
        <a href="@Post.ImageUrl" target="_blank">
            <img src="@Post.ThumbnailUrl" class="img-responsive float-left mr-2" />
        </a>
        }
        @if (!string.IsNullOrEmpty(Post.Content))
        {
            <PostContent Content="@Post.Content"></PostContent>
        }
    </div>
    @if (ViewType == View.Thread)
    {
        <div class="card-footer">
            <a href=@RoutePaths.PostsRoute(State.CurrentBoard.NameShort, Post.Id)>View Thread</a>
        </div>
    }
</div>

@functions {
    [Parameter]
    PostDTO Post { get; set; }

    [Parameter]
    View ViewType { get; set; }

    string PostLink => (Post.IsOp ? RoutePaths.PostsRoute(State.CurrentBoard.NameShort, Post.Id) : RoutePaths.PostsRoute(State.CurrentBoard.NameShort, Post.ThreadId.Value) + '#' + Post.Id);

    void AddQuote() => Dispatch(new AddQuoteAction() { PostId = Post.Id.ToString() });

    //private Microsoft.AspNetCore.Blazor.RenderFragment PostContent;

    //int Sequence { get; set; }

    //protected override void OnInit()
    //{
    //    PostContent = builder =>
    //    {
    //        builder.OpenElement(Sequence, "p");
    //        Sequence++;
    //        builder.AddAttribute(Sequence, "style", "white-space:pre-line;");
    //        Sequence++;
    //        var lines = Post.Content.Split(
    //            new[] { "\r\n", "\r", "\n" },
    //            StringSplitOptions.None
    //        );
    //        for (int i = 0; i < lines.Length; i++)
    //        {
    //            string line = lines[i];
    //            Sequence++;
    //            bool closeSpan = false;
    //            //if line[0] is a single '>' and greater than 1 chracter, make it  quote line
    //            if (line.Count() > 1 && line[0] == '>' && line[1] != '>')
    //            {
    //                builder.OpenElement(Sequence, "span");
    //                closeSpan = true;
    //                builder.AddAttribute(Sequence, "class", "quote");
    //                Sequence++;
    //            }
    //            RenderLine(builder, line);

    //            if (closeSpan) builder.CloseElement(); // closing quote span

    //            if (i + 1 != lines.Length) //append newline except for the very last line
    //            {
    //                builder.AddContent(Sequence, "\n");
    //                Sequence++;
    //            }
    //        }
    //        builder.CloseElement(); // closing p
    //    };
    //}

    //private void RenderLine(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder, string line)
    //{
    //    var words = line.Split(new[] {' '}, StringSplitOptions.None);
    //    foreach (var word in words)
    //    {
    //        var regex = Regex.Match(word, @"^>>>\/(?<board>[A-Za-z]+)\/(?<id>[0-9]+)\/?$");
    //        if (regex.Success) //board redirect
    //        {
    //            var board = regex.Groups["board"].Value;
    //            var id = regex.Groups["id"].Value;
    //            builder.OpenElement(Sequence, "span");
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "class", "text-link");
    //            Sequence++;
    //            builder.OpenComponent<PostLink>(Sequence);
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "Content", word);
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "PostId", id);
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "BoardName", board);
    //            Sequence++;
    //            builder.CloseComponent(); //closing PostLink
    //            builder.CloseElement(); //closing span
    //            builder.AddContent(Sequence, " ");
    //            Sequence++;
    //        }
    //        else if (Regex.IsMatch(word, @"^>>[0-9]+$")) //quote
    //        {
    //            var id = word.Substring(2);
    //            builder.OpenElement(Sequence, "span");
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "class", "text-link");
    //            Sequence++;
    //            builder.OpenComponent<PostLink>(Sequence);
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "Content", word);
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "PostId", id);
    //            Sequence++;
    //            builder.AddAttribute(Sequence, "BoardName", State.CurrentBoard.NameShort);
    //            Sequence++;
    //            builder.CloseComponent(); //closing PostLink
    //            builder.CloseElement(); //closing span
    //            builder.AddContent(Sequence, " ");
    //            Sequence++;
    //        }
    //        else
    //        {
    //            builder.AddContent(Sequence, word);
    //            Sequence++;
    //            builder.AddContent(Sequence, " ");
    //            Sequence++;
    //        }
    //    }
    //}
}