@page "/{Board}/{Thread}"
@inherits ForumAppComponent
@implements IDisposable
@inject HttpClient Http

<BoardsNav />

@if (State.CurrentBoard?.CurrentThread?.Posts == null)
{
    <div class="loading loading-lg"></div>
}
else
{ 
    <div class="container grid-xl">
        <PostForm ViewType="View.Post" />
        <div class="columns">
            <div class="column col-12">
                <button class="btn btn-link float-right" onclick="@UpdateNow">@Time</button>
            </div>
        </div>
        <div class="columns">
            <PostView Post="State.CurrentBoard.CurrentThread" ViewType="View.Post" />
            @foreach (var post in State.CurrentBoard.CurrentThread.Posts)
            {
                <PostView ViewType="View.Post" Post="post" />
            }
            <div class="column col-12">
                <a href=@RoutePaths.Threads(State.CurrentBoard.NameShort)>Back to threads</a>
            </div>
        </div>
    </div>
}

@functions
{
    [Parameter]
    string Board { get; set; }

    [Parameter]
    string Thread { get; set; }

    int ThreadId { get; set; }

    System.Threading.Timer Timer { get; set; }

    int Time { get; set; } = 30;

    protected override async Task OnParametersSetAsync()
    {
        await GetPosts();

        TimeSpan startTimeSpan = TimeSpan.Zero;
        TimeSpan periodTimeSpan = TimeSpan.FromMilliseconds(1000);

        Timer = new System.Threading.Timer(async (e) =>
        {
            await IncrementTimer();
        }, null, startTimeSpan, periodTimeSpan);
    }

    private async Task IncrementTimer()
    {
        Time -= 1;
        if(Time < 1)
        {
            await GetPosts();
            Time = 30;
        }
        StateHasChanged();
    }

    private async Task UpdateNow()
    {
        await GetPosts();
        Time = 30;
        StateHasChanged();
    }

    private async Task GetPosts()
    {
        if (int.TryParse(Thread, out var threadId))
        {
            ThreadId = threadId;
            bool clear = Board != State.CurrentBoard?.NameShort || threadId != State.CurrentBoard?.CurrentThread?.Id;
            await ActionCreators.GetPosts(Store.Dispatch, Http, Board, threadId, clear);
        }
    }

    public new void Dispose()
    {
        this.Timer.Dispose();
        base.Dispose();
    }
}
