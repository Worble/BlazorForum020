@page "/{Board}/{Thread}"
@inherits ForumAppComponent
@inject HttpClient Http

<BoardsNav />

@if (State.CurrentBoard?.CurrentThread?.Posts == null)
{
    <div class="loading loading-lg"></div>
}
else
{
    <div class="container grid-xl">
        @if (State.CurrentBoard.CurrentThread.IsArchived)
        {
        <div class="columns mt-2">
            <div class="column">
                <div class="toast toast-warning text-center">
                    This thread has been archived and can no longer be posted in.
                </div>
            </div>
        </div>
        }
        else
        {
            <PostForm ViewType="View.Post" />
        }
        <div class="columns mt-2">
            <div class="column col-12 post-info-bar">
                @if (!State.CurrentBoard.CurrentThread.IsArchived)
                {
                    @*<PostTimer Board=@Board Thread=@Thread />*@
                }
                <span class="float-right post-count tooltip" data-tooltip="Post Count">@(State.CurrentBoard.CurrentThread.Posts.Count() + 1)</span>
            </div>
        </div>
        <div class="columns">
            <div class="column mt-2 col-12" id=@State.CurrentBoard.CurrentThread.Id>
                <PostView Post="State.CurrentBoard.CurrentThread" ViewType="View.Post" />
            </div>
            @foreach (var post in State.CurrentBoard.CurrentThread.Posts)
            {
                <div class="column mt-2 col-12" id=@post.Id>
                    <PostView ViewType="View.Post" Post="post" />
                </div>
            }
            <div class="column col-12">
                <a href=@RoutePaths.ThreadsRoute(State.CurrentBoard.NameShort)>Back to threads</a>
            </div>
        </div>
    </div>
}

@functions
{
    [Parameter]
    string Board { get; set; }

    [Parameter]
    string Thread { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (int.TryParse(Thread, out var threadId))
        {
            bool clear = Board != State.CurrentBoard?.NameShort || threadId != State.CurrentBoard?.CurrentThread?.Id;
            await ActionCreators.GetPosts(Store.Dispatch, Http, Board, threadId, clear);
        }
    }
}
